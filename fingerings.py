distances = [0, 0.5, 1, 1.5, 2, 3, 3.5, 4, 4.5, 5, 5.5, 6]
notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]

def strd(note):
    if note == "Db":
        return "C#"
    elif note == "Eb":
        return "D#"
    elif note == "Gb":
        return "F#"
    elif note == "Ab":
        return "G#"
    elif note == "Bb":
        return "A#"
    else:
        return note


def in_octave_distance(a, b):
    a_num = 0
    b_num = 0
    for i in range(len(notes)):
        if notes[i] == a:
            a_num = i
        if notes[i] == b:
            b_num = i
    return distances[b_num] - distances[a_num]


def distance(a, b):
    note1, octave1 = a 
    note2, octave2 = b 
    note1 = strd(note1)
    note2 = strd(note2)
    if octave1 == octave2:
        return in_octave_distance(note1, note2)
    else:
        return in_octave_distance(note1, note2) + 7*(octave2 - octave1)

#key: distance between notes, whether first note is sharp, whether second note is sharp
#values: first finger, second finger, cost
transitions = {
    (0.5, 0, 1): [[1, 2, 0], [2, 3, 0], [3, 4, 0.2], [4, 5, 0.6], [1, 3, 0.1], [1, 4, 0.3]],
    (0.5, 1, 0): [[1, 2, 0.3], [2, 3, 0], [3, 4, 0.1], [4, 5, 0.2], [3, 1, 0.1], [4, 1, 0.3]],
    (-0.5, 1, 0): [[2, 1, 0], [3, 2, 0], [4, 3, 0.1], [5, 4, 0.6], [3, 1, 0.1], [4, 1, 0.3]],
    (-0.5, 0, 1): [[2, 1, 0.3], [3, 2, 0], [4, 3, 0], [5, 4, 0.2], [1, 3, 0.2], [4, 1, 0.5]],
    (1, 0, 0): [[1, 2, 0], [2, 3, 0], [3, 4, 0], [4, 5, 0.1], [3, 1, 0.3], [4, 1, 0.5]],
    (-1, 0, 0): [[2, 1, 0], [3, 2, 0], [4, 3, 0], [5, 4, 0.1], [1, 3, 0.4], [1, 4, 0.5]],
    (1, 1, 1): [[1, 2, 0.2], [2, 3, 0], [3, 4, 0.1], [4, 5, 0.2], [3, 1, 0.5], [4, 1, 1]],
    (-1, 1, 1): [[2, 1, 0.1], [3, 2, 0], [4, 3, 0.1], [5, 4, 0.2], [1, 3, 0.3], [1, 4, 1]],
    (1.5, 0, 1): [[1, 2, 0], [1, 3, 0], [1, 4, 0], [1, 5, 0.2], [2, 3, 0.3], [2, 4, 0.2], [2, 5, 0.3], [3, 5, 0.2]],
    (-1.5, 1, 0): [[2, 1, 0], [3, 1, 0], [4, 1, 0], [5, 1, 0.3], [3, 2, 0.3], [4, 2, 0.2], [5, 2, 0.3], [5, 3, 0.2]],
    (1.5, 1, 0): [[1, 2, 0.2], [1, 3, 0], [1, 4, 0.1], [1, 5, 0.3], [2, 3, 0.1], [2, 4, 0.1], [2, 5, 0.2], [3, 5, 0.1], [3, 1, 0.2], [4, 1, 0.6]], 
    (-1.5, 0, 1): [[2, 1, 0.2], [3, 1, 0], [4, 1, 0.1], [5, 1, 0.3], [3, 2, 0.2], [4, 2, 0.1], [5, 2, 0.2], [5, 3, 0.1], [1, 3, 0.2], [1, 4, 0.4]],
    (2, 0, 0): [[1, 2, 0.1], [1, 3, 0], [1, 4, 0], [1, 5, 0.3], [2, 3, 0.4], [2, 4, 0.1], [2, 5, 0.2], [3, 5, 0], [3, 1, 0.7]],
    (-2, 0, 0): [[2, 1, 0.1], [3, 1, 0], [4, 1, 0], [5, 1, 0.3], [3, 2, 0.4], [4, 2, 0.1], [5, 2, 0.2], [5, 3, 0], [1, 3, 0.7]],
    (2, 1, 1): [[1, 2, 0], [1, 3, 0], [1, 4, 0.1], [1, 5, 0.4], [2, 3, 0.1], [2, 4, 0], [2, 5, 0.3], [3, 5, 0], [3, 1, 0.6]],
    (-2, 1, 1): [[2, 1, 0], [3, 1, 0], [4, 1, 0.1], [5, 1, 0.4], [3, 2, 0.1], [4, 2, 0], [5, 2, 0.3], [5, 3, 0], [1, 3, 0.6]],
    (2.5, 0, 1): [[1, 2, 0.1], [1, 3, 0], [1, 4, 0], [1, 5, 0.2], [2, 4, 0.1], [2, 5, 0.3], [2, 3, 0.6]],
    (-2.5, 1, 0): [[2, 1, 0.1], [3, 1, 0], [4, 1, 0], [5, 1, 0.2], [4, 2, 0.1], [5, 2, 0.3], [2, 3, 0.6]],
    (2.5, 1, 0): [[1, 2, 0.3], [1, 3, 0.2], [1, 4, 0.2], [1, 5, 0.5], [2, 4, 0], [2, 5, 0], [2, 3, 0.8]],
    (-2.5, 0, 1): [[2, 1, 0.3], [3, 1, 0.2], [4, 1, 0.2], [5, 1, 0.5], [4, 2, 0], [5, 2, 0], [2, 3, 0.8]],
    (3, 0, 0): [[1, 2, 0.1], [1, 3, 0], [1, 4, 0], [1, 5, 0.2], [2, 4, 0.2], [2, 5, 0], [2, 3, 0.6]],
    (-3, 0, 0): [[2, 1, 0.1], [3, 1, 0], [4, 1, 0], [5, 1, 0.2], [4, 2, 0.2], [5, 2, 0], [3, 2, 0.6]],
    (3, 0, 0): [[1, 2, 0.1], [1, 3, 0], [1, 4, 0], [1, 5, 0.3], [2, 4, 0.3], [2, 5, 0], [2, 3, 0.6]],
    (-3, 0, 0): [[2, 1, 0.1], [3, 1, 0], [4, 1, 0], [5, 1, 0.3], [4, 2, 0.3], [5, 2, 0], [3, 2, 0.6]],
    (3.5, 0, 1): [[1, 2, 0.3], [1, 3, 0], [1, 4, 0], [1, 5, 0.1], [2, 4, 0.4], [2, 5, 0]],
    (-3.5, 1, 0): [[2, 1, 0.3], [3, 1, 0], [4, 1, 0], [5, 1, 0.1], [4, 2, 0.4], [5, 2, 0]],
    (3.5, 1, 0): [[1, 2, 0.2], [1, 3, 0], [1, 4, 0], [1, 5, 0.3], [2, 4, 0.2], [2, 5, 0]],
    (-3.5, 0, 1): [[2, 1, 0.2], [3, 1, 0], [4, 1, 0], [5, 1, 0.3], [4, 2, 0.2], [5, 2, 0]],
    (4, 0, 1): [[1, 2, 0.4], [1, 3, 0.1], [1, 4, 0], [1, 5, 0], [2, 4, 0.6], [2, 5, 0]],
    (-4, 1, 0): [[2, 1, 0.4], [3, 1, 0.1], [4, 1, 0], [5, 1, 0], [4, 2, 0.6], [5, 2, 0]]
}

def shrp(note):
    if len(note) == 1:
        return 0
    else:
        return 1

def get_fingering(notes, start=[1, 2, 3, 4, 5]):
    def cost(start_finger, notes):
        note1 = notes[0]
        note2 = notes[1]
        shrp1 = shrp(note1[0])
        shrp2 = shrp(note2[0])
        dist = distance(note1, note2)
        possible = transitions[(dist, shrp1, shrp2)]
        useable = [i for i in possible if i[0] == start_finger]

        best_cost = 1000
        fingering = []
        if len(notes) == 2:
            for i in useable:
                if i[2]**2 < best_cost:
                    best_cost = i[2]**2
                    fingering = [i[0], i[1]]

        else:
            for i in useable:
                cst, fingr = cost(i[1], notes[1:])
                if i[2]**2 + cst < best_cost:
                    best_cost = i[2]**2 + cst
                    fingering = [i[0]] + fingr

        return best_cost, fingering 

    min_cost = 2000
    best_fingering = []
    for finger in start:
        cst, fngr = cost(finger, notes)
        if cst < min_cost:
            min_cost = cst
            best_fingering = fngr
    print(best_fingering)


print("Sanity check: fingering for a two-octave descending chromatic scale, from B to B.")
get_fingering([["B", 4], ["A#", 4], ["A", 4], ["G#", 4], ["G", 4], ["F#", 4], ["F", 4], ["E", 4], ["D#", 4], ["D", 4], ["C#", 4], ["C", 4], ["B", 3], ["A#", 3], ["A", 3], ["G#", 3], ["G", 3], ["F#", 3], ["F", 3], ["E", 3], ["D#", 3], ["D", 3], ["C#", 3], ["C", 3], ["B", 2]])

animenz = [['Eb', 5], ['F', 5], ['Gb', 5], ['Ab', 5], ['A', 5], ['Bb', 5], ['B', 5], ['F', 5], ['Bb', 5], ['Ab', 5], ['Gb', 5], ['F',5], ['Bb', 5], ['Gb', 5], ['Ab', 5], ['A', 5], ['Bb', 5], ['B', 5], ['C', 6], ['Db', 6]]
get_fingering(animenz)